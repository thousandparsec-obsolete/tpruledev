class ObjectDatabase:
	def __init__(self, save_location=None, tree=None):

    def populateTree(self, tree=None):
        """
        fills the treectrl in the main window with
        the objects loaded from persistence
        """           

    def initObjectTypes(self):
	"""
	finds and loads the registered object types
	and their associated objects out of persistence
	to put them in memory
	"""

    def loadObjectsFromStorage(self):
    	"""
    	loads all of the objects for the registered
    	object types into storage
    	"""

    def add(self, obj_type, obj):
    	"""
    	adds an object, obj, of type obj_type to the
    	database of objects
    	"""

    def remove(self, obj_type, obj):
	"""
    	removes an object, obj, of type obj_type from the
    	database of objects
    	"""
    	
    def getTypes(self):
    	"""
    	returns a list of string identifiers for the object
    	types registered with the object manager
    	"""
    	
    def getObjectCollection(self):
    	"""
    	returns a hash keyed on the object type names
    	whose values are lists of objects of those types
    	"""
    
    def getsObjectsOfType(self, obj_type):
    	"""
    	returns a list of all objects of type obj_type
    	"""
    
    def setSaveLocation(self, save_location):
    	"""
    	sets the directory that serves as the persistence folder
    	"""
        
    def setTreeRoot(self, tree):
    	"""
    	sets the root of the tree that the objects are
    	displayed in
    	"""


class GameObjectTreeCtrl(wx.TreeCtrl):
    def __init__(self, parent, id=-1, pos=wx.DefaultPosition, size=wx.DefaultSize,
                 style=wx.TR_DEFAULT_STYLE, validator=wx.DefaultValidator, name=wx.TreeCtrlNameStr):
        wx.TreeCtrl.__init__(self, parent, id, pos, size, style)
        self.compare_function = lambda x, y: 0

    def SortChildrenByFunction(self, item, func):
        self.compare_function = func
        self.SortChildren(item)
        self.compare_function = lambda x, y: 0

    def OnCompareItems(self, item1, item2):
        """
        This particular OnCompareItems function passes the PyData objects of
        the nodes to be compared to the function provided as a comparison technique.
        """
        if self.compare_function:
            return self.compare_function(self.GetPyData(item1), self.GetPyData(item2))
        else:
            return 0
