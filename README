A Ruleset Development Environment for Thousand Parsec game modes
================================================================

Requirements:
	Python 2.4
	wxPython 2.6.0
	pyscheme 1.6
		pyscheme can be obtained at:
		http://hkn.eecs.berkeley.edu/~dyoo/python/pyscheme/
		It can either be installed using the setup.py file or the contents of
			the src/ directory can be put into the directory:
			.../tpruledev/src/pyscheme

Running the app:
	In Windows:
		Browse to the .../tpruledev/src/ directory and double click on
		the file RDE.py 
	   or:  
		cd to the .../tpruledev/src/ directory and use the command
		`pythonw RDE.py`

	In Linux: 
		cd to the .../tpruledev/src/ directory and use the command
		`python RDE.py` 
	    or: cd to the .../tpruledev/src/ directory and executre RDE.py
	    	directly (./RDE.py when the file is executable)

Noteworthy files and directories:
	tpruledev/src/RDE.py 
		- The application runner, when executed on its own will start
		  the RDE 
	tpruledev/src/TpclEditor.py 
		- The TPCL Expression Editor stand-alone runner. Opens a TPCL Editor dialog
		  window. Most useful for testing and debugging purposes.
	tpruledev/src/WrapRDE.py 
		- A script to wrap the RDE in PyCrust for quickly testing
		  features and exploring the structure
	tpruledev/notes.txt 
		- Todo list and notes on the design and progress of the app
	tpruledev/MTSec/... 
		- An example project which is composed of Components and
		  Properties from the MTSec gametype.
	tpruledev/Minisec/... 
		- A completed project which contains working Components and
		  Properties for the Minisec gametype
	tpruledev/RFTS/... 
		- A sample project based off of the RFTS ruleset
	
