<blocks>
	<!--type INITIAL_BLOCK-->
	<type name="INITIAL_BLOCK">
		<tpcl_block
			name="Lambda Design"
			description="A lambda function taking a design as its only argument."
			display="(lambda (design) *EXPR*)">
			<template>
				<elem type="text" val="(lambda (design) " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
	</type>
	
	<!--type BOOL-->
	<type name="BOOL">
		<tpcl_block
			name="&lt;"
			description="The less-than comparison."
			display="(&lt; *VAL* *VAL*)">
			<template>
				<elem type="text" val="(&lt; " />
				<elem type="block" val="VAL" />
				<elem type="text" val=" " />
				<elem type="block" val="VAL" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name=">"
			description="The greater-than comparison."
			display="(> *VAL* *VAL*)">
			<template>
				<elem type="text" val="(> " />
				<elem type="block" val="VAL" />
				<elem type="text" val=" " />
				<elem type="block" val="VAL" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
			
		<tpcl_block
			name="="
			description="The equal-to comparison."
			display="(= *VAL* *VAL*)">
			<template>
				<elem type="text" val="(= " />
				<elem type="block" val="VAL" />
				<elem type="text" val=" " />
				<elem type="block" val="VAL" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
	</type>	
	
	<!--type PROC-->
	<type name="PROC">
		<tpcl_block
			name="let"
			description="The let block - allows creating temporary variables."
			display="(let ((*SYMBOL* *VAL*)) *EXPR*)">
			<template>
				<elem type="text" val="(let ((" />
				<elem type="block" val="SYMBOL" />
				<elem type="text" val=" " />
				<elem type="block" val="VAL" />
				<elem type="text" val=")) " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
	</type>
	
	<!--type FUNC-->
	<type name="FUNC">
		<tpcl_block
			name="if"
			description="The if flow-control structure"
			display="(if *BOOL* *EXPR* *EXPR*)" >
			<template>
				<elem type="text" val="(if " />
				<elem type="block" val="BOOL" />
				<elem type="text" val=" " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=" " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name="+"
			description="Adder."
			display="(+ *VAL* *VAL*)">
			<template>
				<elem type="text" val="(+ " />
				<elem type="block" val="VAL" />
				<elem type="text" val=" " />
				<elem type="block" val="VAL" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name="-"
			description="Subtractor."
			display="(- *VAL* *VAL*)">
			<template>
				<elem type="text" val="(- " />
				<elem type="block" val="VAL" />
				<elem type="text" val=" " />
				<elem type="block" val="VAL" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name="cons"
			description="Cons"
			display="(cons *EXPR* *EXPR*)">
			<template>
				<elem type="text" val="(cons " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=" " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name="car"
			description="Car"
			display="(car *EXPR* *EXPR*)">
			<template>
				<elem type="text" val="(car " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=" " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name="cdr"
			description="Cdr"
			display="(cdr *EXPR* *EXPR*)">
			<template>
				<elem type="text" val="(cdr " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=" " />
				<elem type="block" val="EXPR" />
				<elem type="text" val=")" />
			</template>
		</tpcl_block>
	</type>
	
	
	<!--type SYMBOL-->
	<!--
	we don't define any symbols by default...
	we need to get these from our environment
	and from user defined symbols
	-->
	
	
	<!--type VAL-->
	<type name="VAL">
		<tpcl_block
			name="#t"
			description="True constant."
			display="#t">
			<template>
				<elem type="text" val="#t" />
			</template>
		</tpcl_block>
		
		<tpcl_block
			name="#f"
			description="False constant."
			display="#f">
			<template>
				<elem type="text" val="#f" />
			</template>
		</tpcl_block>
	</type>
</blocks>