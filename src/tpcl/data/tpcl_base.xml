<!--
Quick doc on the format of the xml file here:

Categories:
	<category name="CatName">
	</category>
	
	A category is simply a node in a tree which contains other categories and expressions.
	The name attribute is required.
	
Expressions:
	<expression
		name=""
		description=""
		display="">
		<template>
			<elem type="" val="" />
		</template>
		<oninsert>TEXT</oninsert>
		<expansion_menu>TEXT</expansion_menu>
	</expression>
	
	Expressions define TPCL Expression Blocks. They must have a name, description and display.
	The name is used to display it to the user, the description is used as documentation and the
	display string is used to give a preview of what the code will look like when inserted.
	
	The template element defines the template for the TPCL Code. This is composed of elements of the
	following types:
		text - Plain text, unchangeable, val required
		block - A place where another expression can be inserted, val required
		exp_point - An expansion point where the user can choose to extend or close off the expression
		eol - an end of line marker
		indent - an indent marker
		
	The oninsert element is a snippet of python code that is called when an expression of this type
	is inserted into the expression editor. Typically this will be a dialog window prompting the
	user for input when necessary, but it can be anything that you want. The python code must define,
	however, a function called OnInsert(expression) that takes one parameter, expression, which is
	the TpclExpression that results from using the template of this block.
	
	The expansion_menu element contains a snippet of python code. Its purpose is to initialize the variable
	exp_menu as a wx.Menu to be displayed when the user clicks on an expansion point. It should give the user
	the option to close off the expansion points or extend them.
	
File processing:
	When the file is processed the categories are processed recursively such that categories are
	evaluated first and added as children before any expressions. So the ordering of elements
	only matters within elements of the same type. Categories will always come before Expressions
-->

<blocks>
	<category name="Built-In">
		<category name="Procedure Definitions">
			<expression
				name="TPCL Requirements Function"
				description="This TPCL function is called (on all components which are in a design) when adding a new component is added to a design. If the component is allowed to be added to a design then the function should return a pair with True and a string to be displayed (empty strings are acceptable), otherwise it should return a pair with false and a string which describes the reason for not being able to add the component. The function is given a design object which has appears as if the component was already added. Returns - Bool"
				display="(lambda (design)\n\t*EXPR*)">
				<template>
					<elem type="text" val="(lambda (design) " />
					<elem type="eol" />
					<elem type="indent" />
					<elem type="block" val="EXPR" />
					<elem type="text" val=")" />
				</template>
			</expression>
			
			<expression 
				name="TPCL Requires Function"
				description="A lambda function taking a design as its only argument."
				display="(lambda (design)\n\t*EXPR*)">
				<template>
					<elem type="text" val="(lambda (design) " />
					<elem type="eol" />
					<elem type="indent" />
					<elem type="block" val="EXPR" />
					<elem type="text" val=")" />
				</template>
			</expression>
			
			<expression
				name="TPCL Display Function"
				description="A TPCL function which is called to work out how to display the property. Returns a pair which contains the actual value and a formatted string which will be displayed - (Real . String)"
				display="(lambda (design bits)\n\t*EXPR*)">
				<template>
					<elem type="text" val="(lambda (design bits) " />
					<elem type="eol" />
					<elem type="indent" />
					<elem type="block" val="EXPR" />
					<elem type="text" val=")" />
				</template>
			</expression>
			
			<expression
				name="TPCL Cost Function"
				description="A TPCL function which is called to work out the amount this component contributes to a property. It should return a valid number. It is given the current design. Returns - Real"
				display="(lambda (design)\n\t*EXPR*)">
				<template>
					<elem type="text" val="(lambda (design bits) " />
					<elem type="eol" />
					<elem type="indent" />
					<elem type="block" val="EXPR" />
					<elem type="text" val=")" />
				</template>
			</expression>
		</category>
		
		<category
			name="Literal Expression"
			description="Values that are interpreted literally such as strings, numbers, boolean values and quote escaped expressions.">
			<expression
				name="String Literal"
				description="A string with some definite value."
				display="String">
				<template>
					<elem type="text" val=""/>
				</template>
				<oninsert>
def OnInsert(expression):
	dialog = wx.TextEntryDialog(None, "Text:", "String Literal", style = wx.OK | wx.CANCEL)
	if dialog.ShowModal() == wx.ID_OK:
		text = dialog.GetValue()
		expression.SetElementData(0, '"%s"' % text)
		return True
	else:
		return False</oninsert>
			</expression>
			
			<expression
				name="Numerical Literal"
				description="A number."
				display="#">
				<template>
					<elem type="text" val=""/>
				</template>
				<oninsert>
def OnInsert(expression):
	dialog = wx.TextEntryDialog(None, "Number:", "Numerical Value", style = wx.OK | wx.CANCEL)
	if dialog.ShowModal() == wx.ID_OK:
		num = dialog.GetValue()
		expression.SetElementData(0, '%s' % num)
		return True
	else:
		return False</oninsert>
			</expression>
			
			<expression
				name="Boolean"
				description="True or false."
				display="#f/#t">
				<template>
					<elem type="text" val=""/>
				</template>
				<oninsert>
def OnInsert(expression):
	choice = wx.GetSingleChoiceIndex("Boolean Value:", "Boolean Value", ["False", "True"])
	if choice == 1:
		expression.SetElementData(0, "#t")
	elif choice == 0:
		expression.SetElementData(0, "#f")
	else:
		return False
	return True</oninsert>
			</expression>
			
			<expression
				name="Quote Escaped Expression"
				description="A quote escaped TPCL Expression. For advanced coders only."
				display="'*TEXT*">
				<template>
					<elem type="text" val=""/>
				</template>
				<oninsert>
def OnInsert(expression):
	dialog = wx.TextEntryDialog(None, "Escaped Value:", "Quote Escaped Expression", style = wx.OK | wx.CANCEL)
	if dialog.ShowModal() == wx.OK:
		text = dialog.GetValue()
		expression.SetElementData(0, "'%s" % text)
		return True
	else:
		return False</oninsert>
			</expression>
		</category>
		
		<category name="Procedure Calls">
			<category name="String Functions">
				<category name="Comparison Operators">
					<category name="Case Insensitive">
						<expression
							name="string-ci=?"
							description="Returns #t if the two strings are the same length and contain the same characters in the same positions, otherwise returns #f. Case insensitive"
							display="(string-ci=? *STRING* *STRING*)">
							<template>
								<elem type="text" val="(string-ci=? " />
								<elem type="block" val="STRING" />
								<elem type="text" val=" " />
								<elem type="block" val="STRING" />
								<elem type="text" val=")" />
							</template>
						</expression>
						
						<expression
							name="string-ci&lt;?"
							description="&lt; comparison using lexicographic extensions on the strings based on characters"
							display="(string-ci&lt;? *STRING* *STRING*)">
							<template>
								<elem type="text" val="(string-ci&lt;? " />
								<elem type="block" val="STRING" />
								<elem type="text" val=" " />
								<elem type="block" val="STRING" />
								<elem type="text" val=")" />
							</template>
						</expression>
						
						<expression
							name="string-ci>?"
							description="> comparison using lexicographic extensions on the strings based on characters"
							display="(string-ci>? *STRING* *STRING*)">
							<template>
								<elem type="text" val="(string-ci>? " />
								<elem type="block" val="STRING" />
								<elem type="text" val=" " />
								<elem type="block" val="STRING" />
								<elem type="text" val=")" />
							</template>
						</expression>
						
						<expression
							name="string-ci&lt;=?"
							description="&lt;= comparison using lexicographic extensions on the strings based on characters"
							display="(string-ci&lt;=? *STRING* *STRING*)">
							<template>
								<elem type="text" val="(string-ci&lt;=? " />
								<elem type="block" val="STRING" />
								<elem type="text" val=" " />
								<elem type="block" val="STRING" />
								<elem type="text" val=")" />
							</template>
						</expression>
						
						<expression
							name="string-ci>=?"
							description=">= comparison using lexicographic extensions on the strings based on characters"
							display="(string-ci>=? *STRING* *STRING*)">
							<template>
								<elem type="text" val="(string-ci>=? " />
								<elem type="block" val="STRING" />
								<elem type="text" val=" " />
								<elem type="block" val="STRING" />
								<elem type="text" val=")" />
							</template>
						</expression>
					</category>
					<!--End of case-insensitive string comparisons-->
					
					<expression
						name="string=?"
						description="Returns #t if the two strings are the same length and contain the same characters in the same positions, otherwise returns #f."
						display="(string=? *STRING* *STRING*)">
						<template>
							<elem type="text" val="(string=? " />
							<elem type="block" val="STRING" />
							<elem type="text" val=" " />
							<elem type="block" val="STRING" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="string&lt;?"
						description="&lt; comparison using lexicographic extensions on the strings based on characters"
						display="(string&lt;? *STRING* *STRING*)">
						<template>
							<elem type="text" val="(string&lt;? " />
							<elem type="block" val="STRING" />
							<elem type="text" val=" " />
							<elem type="block" val="STRING" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="string>?"
						description="> comparison using lexicographic extensions on the strings based on characters"
						display="(string>? *STRING* *STRING*)">
						<template>
							<elem type="text" val="(string>? " />
							<elem type="block" val="STRING" />
							<elem type="text" val=" " />
							<elem type="block" val="STRING" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="string&lt;=?"
						description="&lt;= comparison using lexicographic extensions on the strings based on characters"
						display="(string&lt;=? *STRING* *STRING*)">
						<template>
							<elem type="text" val="(string&lt;=? " />
							<elem type="block" val="STRING" />
							<elem type="text" val=" " />
							<elem type="block" val="STRING" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="string>=?"
						description=">= comparison using lexicographic extensions on the strings based on characters"
						display="(string>=? *STRING* *STRING*)">
						<template>
							<elem type="text" val="(string>=? " />
							<elem type="block" val="STRING" />
							<elem type="text" val=" " />
							<elem type="block" val="STRING" />
							<elem type="text" val=")" />
						</template>
					</expression>
				</category>
				<!--End String Comp-Ops-->
				
				<expression
					name="make-string"
					description="Initializes an empty string of length VAL"
					display="(make-string *VAL*)">
					<template>
						<elem type="text" val="(make-string " />
						<elem type="block" val="VAL" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="make-string char"
					description="Initializes an empty string of length VAL filled with characters of type VAL"
					display="(make-string *VAL* *VAL*)">
					<template>
						<elem type="text" val="(make-string " />
						<elem type="block" val="VAL" />
						<elem type="text" val=" " />
						<elem type="block" val="VAL" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="string-length"
					description="Returns the number of characters in string"
					display="(string-length *STRING*)">
					<template>
						<elem type="text" val="(string-length " />
						<elem type="block" val="STRING" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
			</category>
			<!--End String Ops-->
			
			<category name="Numerical Functions">
				<expression
					name="+"
					description="Adder."
					display="(+ *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(+ " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="+ ..."
					description="Expandable Adder."
					display="(+ *EXPR* *...*)">
					<template>
						<elem type="text" val="(+ " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="exp_point">
							<menu_option
								name="Additional Argument">
								<template>
									<elem type="block" val="EXPR" />
									<elem type="text" val=" " />
								</template>
							</menu_option>
							<menu_option
								name="No More Arguments"
								close_expansion="True" />
						</elem>
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="-"
					description="Subtractor."
					display="(- *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(- " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="/"
					description="Divider."
					display="(/ *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(/ " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="*"
					description="Multiplier."
					display="(* *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(* " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="max"
					description="Returns the maximum value of its arguments."
					display="(max *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(max " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="min"
					description="Returns the minimum value of its arguments."
					display="(min *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(min " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="abs"
					description="Returns the absolute value of its argument."
					display="(abs *EXPR*)">
					<template>
						<elem type="text" val="(abs " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="quotient"
					description="Returns the quotient of its first argument divided by the second."
					display="(quotient *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(quotient " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="remainder"
					description="Returns the remainder value of first argument divided by its second."
					display="(remainder *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(remainder " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="modulo"
					description="Returns the modulo value of its first argument divided by its second."
					display="(modulo *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(modulo " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
			</category>
			<!--End of numerical functions-->
			
			<category name="List Operators">
				<expression
					name="cons"
					description="Cons operation"
					display="(cons *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(cons " />
						<elem type="block" val="FIRST" />
						<elem type="text" val=" " />
						<elem type="block" val="SECOND" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="car"
					description="Car operation"
					display="(car *EXPR*)">
					<template>
						<elem type="text" val="(car " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="cdr"
					description="Cdr operation"
					display="(cdr *EXPR*)">
					<template>
						<elem type="text" val="(cdr " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
			</category>
			<!--end of list operators-->
			
			<category name="Boolean Operators">
				<category name="Equivalence Operators">
					<expression
						name="="
						description="The equal-to comparison."
						display="(= *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(= " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="eqv?"
						description="Returns #t if its arguments should normally be regarded as the same object."
						display="(eqv? *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(eqv? " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="eq?"
						description="eq? is similar to eqv? except that in some cases it is capable of discerning distinctions finer than those detectable by eqv?."
						display="(eq? *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(eq? " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="equal?"
						description="Returns #t if its arguments should normally be regarded as the same object."
						display="(equal? *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(equal? " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
				</category>
				<!--End of equivalence operators-->
				
				<category name="Comparison Operators">
					<expression
						name="&lt;"
						description="The less-than comparison."
						display="(&lt; *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(&lt; " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name="&lt;="
						description="The less-than-or-equal comparison."
						display="(&lt;= *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(&lt;= " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name=">"
						description="The greater-than comparison."
						display="(> *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(> " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
					
					<expression
						name=">="
						description="The greater-than-or-equal comparison."
						display="(>= *EXPR* *EXPR*)">
						<template>
							<elem type="text" val="(>= " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=" " />
							<elem type="block" val="EXPR" />
							<elem type="text" val=")" />
						</template>
					</expression>
				</category>
				<!--End of comparison operators-->
				
				<expression
					name="not"
					description="The boolean inverse operator - turns True => False and False => True."
					display="(not *EXPR*)">
					<template>
						<elem type="text" val="(not " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="and"
					description="The boolean and operator - returns True only when all expressions are True."
					display="(and *EXPR* *EXPR*)">
					<template>
						<elem type="text" val="(and " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="or"
					description="The boolean or operator - returns True is any of the expressions in it are True."
					display="(or *EXPR*)">
					<template>
						<elem type="text" val="(or " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>				
			</category>
			<!--end of boolean operators-->
			
			<category name="Flow Control">
				<expression
					name="if"
					description="The if flow-control structure"
					display="(if *TEST*\n\t*WHEN-TRUE*\n\t*WHEN-FALSE*)" >
					<template>
						<elem type="text" val="(if " />
						<elem type="block" val="TEST" />
						<elem type="eol" />
						<elem type="indent" />
						<elem type="block" val="WHEN-TRUE" />
						<elem type="eol" />
						<elem type="indent" />
						<elem type="block" val="WHEN-FALSE" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="cond"
					description="The cond flow-control structure"
					display="(cond (*TEST* *WHEN-TRUE*) *...*)" >
					<template>
						<elem type="text" val="(cond (" />
						<elem type="block" val="TEST" />
						<elem type="text" val = " " />
						<elem type="block" val="WHEN-TRUE" />
						<elem type="text" val = ")" />
						<elem type="eol" />
						<elem type="indent" />
						<elem type="exp_point">
							<menu_option
								name="Additional Condition">
								<template>
									<elem type="text" val = "(" />
									<elem type="block" val="TEST" />
									<elem type="text" val=" " />
									<elem type="block" val="WHEN-TRUE" />
									<elem type="text" val = ")" />
									<elem type="eol" />
								</template>
							</menu_option>
							<menu_option
								name="Else Clause"
								close_expansion="True">
								<template>
									<elem type="text" val = "(else" />
									<elem type="text" val=" " />
									<elem type="block" val="EXPR" />
									<elem type="text" val = ")" />
								</template>
							</menu_option>
							<menu_option
								name="No More Conditions"
								close_expansion="True" />
						</elem>
						<elem type="text" val=")" />
					</template>
				</expression>
			</category>
			<!--end of flow control-->
			
			<category name="Miscelaneous Operators">
				<expression
					name="let"
					description="The let block - allows creating temporary variables."
					display="(let ((*SYMBOL* *VAL*))\n\t*EXPR*)">
					<template>
						<elem type="text" val="(let ((" />
						<elem type="block" val="SYMBOL" />
						<elem type="text" val=" " />
						<elem type="block" val="EXPR" />
						<elem type="text" val="))" />
						<elem type="eol" />
						<elem type="indent" />
						<elem type="block" val="EXPR" />
						<elem type="text" val=")" />
					</template>
				</expression>
				
				<expression
					name="apply"
					description="The function apply returns the result of applying its first argument to its second argument."
					display="(apply *SYMBOL* *VAL*)">
					<template>
						<elem type="text" val="(apply " />
						<elem type="block" val="SYMBOL" />
						<elem type="text" val=" " />
						<elem type="block" val="VAL" />
						<elem type="text" val=")" />
					</template>
				</expression>
			</category>
			<!--end of miscelaneous operators-->
		</category>
		<!--end of procedures-->
	</category>
	<!--end of built-in-->
	
	<category name="User Defined">
	</category>		
</blocks>